A) Create an Android application that will change color of the screen and change the font size of text
view using xml.
[10]
SOLUTION:
Activity.java :
package com.example.slip2_1;
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import android.util.TypedValue;
import android.widget.*;
public class MainActivity extends AppCompatActivity {
private RelativeLayout mainLayout;
private TextView textView;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
mainLayout = findViewById(R.id.main_layout);
textView = findViewById(R.id.textview);
// Set background color of main layout
mainLayout.setBackgroundColor(getResources().getColor(R.color.colorPrimary
));
// Set text size of text view
textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 24);
}
}
Activity.xml :
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:tools="http://schemas.android.com/tools">
<application
android:allowBackup="true"
android:dataExtractionRules="@xml/data_extraction_rules"
android:fullBackupContent="@xml/backup_rules"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:supportsRtl="true"
android:theme="@style/Theme.Slip2_1"
tools:targetApi="31">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER"
/>
</intent-filter>
</activity>
</application>
</manifest>

B) Create table Project(id,name,dept,city). Create Application to perform the following
operations.(usingsqlite database)
i)
Add records.
ii)
Display all the records.
[20]

SOLUTION:

import sqlite3

# Create a connection to the database
conn = sqlite3.connect('project.db')

# Create a cursor object to execute SQL commands
cursor = conn.cursor()

# Create the "Project" table
cursor.execute('''CREATE TABLE Project
                  (id INTEGER PRIMARY KEY,
                  name TEXT NOT NULL,
                  dept TEXT NOT NULL,
                  city TEXT NOT NULL);''')

# Commit the changes to the database
conn.commit()

# Function to add records to the "Project" table
def add_record(id, name, dept, city):
    cursor.execute("INSERT INTO Project (id, name, dept, city) VALUES (?, ?, ?, ?)",
                   (id, name, dept, city))
    conn.commit()
    print("Record added successfully.")

# Function to display all records in the "Project" table
def display_records():
    cursor.execute("SELECT * FROM Project")
    records = cursor.fetchall()
    for record in records:
        print(record)

# Close the database connection
def close_connection():
    cursor.close()
    conn.close()

# Usage example
add_record(1, "Project1", "Dept1", "City1")
add_record(2, "Project2", "Dept2", "City2")
display_records()

# Close the connection when you're done
close_connection()

Q.2 A) Write a C program to move the content of file1.txt to file2.txt and remove the file1.txt from directory.
SOLUTION:

#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#define buffersize 10000
int main()
{
char source[25],destination[25]; //Source and destination filename
char buffer[buffersize]; //Character buffer
ssize_t read_in,write_out; //Number of bytes returned by single read and write operation
printf(“Enter source file name”);
scanf(“%s”,&source);
printf(“%s”,source);
int sourcefiledesc = open(source,O_RDONLY); //Source file open in read only mode
if(sourcefiledesc < 0 )
{
printf(“Source file not Exist”); //Source file not found
}
else
{
printf(“Enter destination file name”);
scanf(“%s”,&destination);
/* Destination file open in write mode and if not found then create*/
int destfiledesc = open(destination,O_WRONLY | O_CREAT);
while((read_in = read(sourcefiledesc,&buffer,buffersize))>0)
{
write_out = write(destfiledesc,&buffer,read_in);
}
if (remove(sourcefiledesc) == 0)
printf("File Deleted successfully");
else
printf("Unable to delete the file");
close(sourcefiledesc);
close(destfiledesc);
}
return 0;
}


B) Write a C program which creates a child process to run linux/ unix command or any user
defined program. The parent process set the signal handler for death of child signal and Alarm
signal. If a child process does not complete its execution in 5 second then parent process kills
child process.
[20]

SOLUTION:

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>

void handle_child_death(int signum)
{
    int status;
    wait(&status);
    printf("Child process terminated.\n");
    exit(0);
}

void handle_timeout(int signum)
{
    printf("Child process timed out. Killing it.\n");
    kill(getpid(), SIGKILL);
    exit(0);
}

int main()
{
    pid_t pid;
    int status;

    signal(SIGCHLD, handle_child_death);
    signal(SIGALRM, handle_timeout);

    pid = fork();

    if (pid < 0) {
        printf("Fork failed.\n");
        return 1;
    } else if (pid == 0) {
        // Child process
        printf("Child process executing...\n");
        // Replace the command with the desired Linux/Unix command or user-defined program
        execl("/bin/sleep", "sleep", "10", NULL);
        exit(0);
    } else {
        // Parent process
        printf("Parent process waiting...\n");
        alarm(5); // Set an alarm for 5 seconds

        while (1) {
            if (waitpid(pid, &status, WNOHANG) > 0) {
                if (WIFEXITED(status)) {
                    printf("Child process exited normally.\n");
                    break;
                }
            }
        }

        alarm(0); // Cancel the alarm
    }

    return 0;
}
