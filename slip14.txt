A) Construct an Android app that toggles a light bulb on and off when the user clicks on toggle button
[10]

SOLUTION:

Activity_main.xml

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingLeft="16dp"
    android:paddingTop="16dp"
    android:paddingRight="16dp"
    android:paddingBottom="16dp"
    tools:context=".MainActivity">

    <ImageView
        android:id="@+id/imageViewLightBulb"
        android:layout_width="200dp"
        android:layout_height="200dp"
        android:src="@drawable/light_bulb_off"
        android:layout_centerInParent="true" />

    <ToggleButton
        android:id="@+id/toggleButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textOn="On"
        android:textOff="Off"
        android:checked="false"
        android:layout_below="@id/imageViewLightBulb"
        android:layout_centerHorizontal="true" />

</RelativeLayout>

Mainactivity.kt

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.widget.CompoundButton
import android.widget.ImageView

class MainActivity : AppCompatActivity() {

    private lateinit var imageViewLightBulb: ImageView
    private lateinit var toggleButton: ToggleButton

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        imageViewLightBulb = findViewById(R.id.imageViewLightBulb)
        toggleButton = findViewById(R.id.toggleButton)

        toggleButton.setOnCheckedChangeListener { buttonView, isChecked ->
            if (isChecked) {
                imageViewLightBulb.setImageResource(R.drawable.light_bulb_on)
            } else {
                imageViewLightBulb.setImageResource(R.drawable.light_bulb_off)
            }
        }
    }
}

B) Construct an Android application to accept a number and calculate Armstrong and Perfect number of
a given number using Menu.
[20]

SOLUTION:

Activity_main.xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:gravity="center"
    android:orientation="vertical">

    <TextView
        android:id="@+id/titleTextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:text="Armstrong and Perfect Number Checker"
        android:textSize="20sp"
        android:textStyle="bold" />

    <EditText
        android:id="@+id/numberEditText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:hint="Enter a number"
        android:inputType="number" />

    <Button
        android:id="@+id/checkButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginBottom="16dp"
        android:text="Check" />

</LinearLayout>

Mainactivity.java

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    private EditText numberEditText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        numberEditText = findViewById(R.id.numberEditText);
        Button checkButton = findViewById(R.id.checkButton);

        checkButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String numberStr = numberEditText.getText().toString();

                if (!numberStr.isEmpty()) {
                    int number = Integer.parseInt(numberStr);
                    boolean isArmstrong = isArmstrongNumber(number);
                    boolean isPerfect = isPerfectNumber(number);

                    String result = "Number " + number + " is ";
                    if (isArmstrong) {
                        result += "an Armstrong number.";
                    } else {
                        result += "not an Armstrong number.";
                    }

                    result += "\nNumber " + number + " is ";
                    if (isPerfect) {
                        result += "a Perfect number.";
                    } else {
                        result += "not a Perfect number.";
                    }

                    Toast.makeText(MainActivity.this, result, Toast.LENGTH_LONG).show();
                } else {
                    Toast.makeText(MainActivity.this, "Please enter a number", Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    private boolean isArmstrongNumber(int number) {
        int originalNumber = number;
        int result = 0;
        int length = String.valueOf(number).length();

        while (number != 0) {
            int remainder = number % 10;
            result += Math.pow(remainder, length);
            number /= 10;
        }

        return originalNumber == result;
    }

    private boolean isPerfectNumber(int number) {
        int sum = 0;
        for (int i = 1; i <= number / 2; i++) {
            if (number % i == 0) {
                sum += i;
            }
        }

      

Q.2 A) Write a C program to create an unnamed pipe. Write following three messages to pipe and display it.
Message1 = “Hello World”
Message2 = “Hello SPPU”
Message3 = “Linux is Funny”

SOLUTION:


#include<stdio.h>
#include<unistd.h>
int main()


{
int pipefds[2];
int returnstatus;
char writemessages[3][20]={"Hello World", "Hello SPPU","Linux is Funny"};
char readmessage[20];
returnstatus = pipe(pipefds);
             if (returnstatus == -1)
{
printf("Unable to create pipe\n");
return 1;
}
int child = fork();
if(child==0)
{
printf("Child is Writing to pipe - Message 1 is %s\n", writemessages[0]);
write(pipefds[1], writemessages[0], sizeof(writemessages[0]));
printf("Child is Writing to pipe - Message 2 is %s\n", writemessages[1]);
write(pipefds[1], writemessages[1], sizeof(writemessages[1]));
printf("Child is Writing to pipe - Message 3 is %s\n", writemessages[2]);
write(pipefds[1], writemessages[2], sizeof(writemessages[2]));
}
else
{
read(pipefds[0], readmessage, sizeof(readmessage));
printf("Parent Process is Reading from pipe – Message 1 is %s\n", readmessage);
read(pipefds[0], readmessage, sizeof(readmessage));
printf("Parent Process is Reading from pipe – Message 2 is %s\n", readmessage);
read(pipefds[0], readmessage, sizeof(readmessage));
printf("Parent Process is Reading from pipe – Message 3 is %s\n", readmessage);
}   
}
OUTPUT:
Child is Writing to pipe - Message 1 is Hello World
Child is Writing to pipe - Message 2 is Hello SPPU
Child is Writing to pipe - Message 3 is Linux is Funny
Parent Process is Reading from pipe – Message 1 is Hello World
Parent Process is Reading from pipe – Message 2 is Hello SPPU
Parent Process is Reading from pipe – Message 3 is Linux is Funny

B) Write a C program that behaves like a shell (command interpreter). It has its own prompt say
“NewShell$”.Any normal shell command is executed from your shell by starting a child process to
execute the system program corresponding to the command. It should additionally interpret the
following command.
i)
search f <pattern><filename> - search first occurrence of pattern in filename
ii)
search c <pattern><filename> - count no. of occurrences of pattern in filename
iii)
search a <pattern><filename> - search all occurrences of pattern in filename
[
Soln:
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
char *buff,*t1,*t2,*t3,*t4,ch;
FILE *fp;
int pid;
void search(char *t2,char *t3,char *t4)
{
int i=1,count=0;
char *p;
if((fp=fopen(t4,"r"))==NULL)
printf("File not found\n");
else
{
if(strcmp(t2,"f")==0)
{
while(fgets(buff,80,fp))
{
if((strstr(buff,t3))!=NULL)
{
printf("%d: %s\n",i,buff);
break;
}
}
i++;
}
else if(strcmp(t2,"c")==0)
{
while(fgets(buff,80,fp))
{
if((strstr(buff,t3))!=NULL)
{
count++;

}
}
printf("No of occurences of %s= %d\n",t3,count);
}
else if(strcmp(t2,"a")==0)
{
while(fgets(buff,80,fp))
{
if((strstr(buff,t3))!=NULL)
{
printf("%d: %s\n",i,buff);
}
i++;
}
}
else
printf("Command not found\n");

fclose(fp);
}
}
main()
{
while(1)
{
printf("myshell$");
fflush(stdin);
t1=(char *)malloc(80);
t2=(char *)malloc(80);
t3=(char *)malloc(80);
t4=(char *)malloc(80);
buff=(char *)malloc(80);
fgets(buff,80,stdin);  
sscanf(buff,"%s %s %s %s",t1,t2,t3,t4);
if(strcmp(t1,"pause")==0)
exit(0);
else if(strcmp(t1,"search")==0)
search(t2,t3,t4);
else
{
pid=fork();
if(pid<0)
printf("Child process is not created\n");
else if(pid==0)
{         
execlp("/bin",NULL);
if(strcmp(t1,"exit")==0)
exit(0);
system(buff);
}
else
{         
wait(NULL);
exit(0);
}
}
}}