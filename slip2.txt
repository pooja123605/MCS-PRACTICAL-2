Q.1. A) Create an Android Application that will change color of the screen and change the font size of text
view using xml.

SOLUTION:
Activity.java :
package com.example.slip2_1;
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import android.util.TypedValue;
import android.widget.*;
public class MainActivity extends AppCompatActivity {
private RelativeLayout mainLayout;
private TextView textView;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
mainLayout = findViewById(R.id.main_layout);
textView = findViewById(R.id.textview);
// Set background color of main layout
mainLayout.setBackgroundColor(getResources().getColor(R.color.colorPrimary
));
// Set text size of text view
textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 24);
}
}

Activity.xml :
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:tools="http://schemas.android.com/tools">
<application
android:allowBackup="true"
android:dataExtractionRules="@xml/data_extraction_rules"
android:fullBackupContent="@xml/backup_rules"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:supportsRtl="true"
android:theme="@style/Theme.Slip2_1"
tools:targetApi="31">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER"
/>
</intent-filter>
</activity>
</application>
</manifest>

B) Write an IOS application to implement UI elements like Pickers

SOLUTION:

import UIKit

class ViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {
    @IBOutlet weak var pickerView: UIPickerView!
   
    let data = ["Option 1", "Option 2", "Option 3", "Option 4"] // Example data for the picker
   
    override func viewDidLoad() {
        super.viewDidLoad()
       
        pickerView.delegate = self
        pickerView.dataSource = self
    }
   
    // MARK: - UIPickerViewDataSource
   
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1 // Return the number of components in the picker (in this case, just 1)
    }
   
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return data.count // Return the number of rows in the picker (based on the data array)
    }
   
    // MARK: - UIPickerViewDelegate
   
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return data[row] // Return the title for a specific row in the picker
    }
   
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        let selectedOption = data[row] // Get the selected option from the data array
        print("Selected option: \(selectedOption)")
    }
}




Q.2 A) Write a C program that a string as an argument and return all the files that begins with that name in
the current directory. For example > ./a.out foo will return all file names that begins with foo.

SOLUTION:

#include<stdio.h>
#include<dirent.h>
#include<string.h>

int main(int argc, char* argv[])
{
DIR *d;
char *position;
struct dirent *dir;
int i=0;

if(argc!=2){
printf("Provide suffiecient args");
}
else {
d = opendir(".");
if (d)
{
while ((dir = readdir(d)) != NULL)
{
position=strstr(dir->d_name,argv[1]);
i=position-dir->d_name;
if(i==0)
printf("%s\n",dir->d_name);

}
closedir(d);
}
return(0);
}
}


B) Write a C program to demonstrates the different behavior that can be seen with automatic,
global, register, static and volatile variables (Use setjmp() and longjmp() system call).

SOLUTION:

#include <stdio.h>
#include <setjmp.h>

// Global variable
int global_var = 0;

// Volatile variable
volatile int volatile_var = 0;

// Static variable
static int static_var = 0;

// Register variable
register int register_var = 0;

jmp_buf buffer;

void modify_variables() {
    // Automatic variable
    int automatic_var = 0;

    printf("Initial values:\n");
    printf("Global variable: %d\n", global_var);
    printf("Volatile variable: %d\n", volatile_var);
    printf("Static variable: %d\n", static_var);
    printf("Automatic variable: %d\n", automatic_var);
    printf("Register variable: %d\n", register_var);
    printf("\n");

    // Modify the variables
    global_var = 1;
    volatile_var = 1;
    static_var = 1;
    automatic_var = 1;
    register_var = 1;

    // Display the modified values
    printf("Modified values:\n");
    printf("Global variable: %d\n", global_var);
    printf("Volatile variable: %d\n", volatile_var);
    printf("Static variable: %d\n", static_var);
    printf("Automatic variable: %d\n", automatic_var);
    printf("Register variable: %d\n", register_var);
    printf("\n");

    // Jump back to the main function
    longjmp(buffer, 1);
}

int main() {
    if (setjmp(buffer) == 0) {
        // Initial values before modification
        printf("Initial values:\n");
        printf("Global variable: %d\n", global_var);
        printf("Volatile variable: %d\n", volatile_var);
        printf("Static variable: %d\n", static_var);
        printf("Register variable: %d\n", register_var);
        printf("\n");

        modify_variables();
    } else {
        // Values after modification
        printf("Values after modification:\n");
        printf("Global variable: %d\n", global_var);
        printf("Volatile variable: %d\n", volatile_var);
        printf("Static variable: %d\n", static_var);
        printf("Register variable: %d\n", register_var);
        printf("\n");
    }

    return 0;
}